package com.yangchd.design.template;

/**
 * @author yangchd  2018/6/15.
 *
 * 模板方法模式:
 * 定义一个操作中算法的框架，而将一些步骤延迟到子类中。
 * 模板方法模式使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。
 *
 * 模板方法模式是一种基于继承的代码复用技术，它是一种类行为型模式。
 *
 * 5.1 模式优点
 * (1) 在父类中形式化地定义一个算法，而由它的子类来实现细节的处理，在子类实现详细的处理算法时并不会改变算法中步骤的执行次序。
 * (2) 模板方法模式是一种代码复用技术，它在类库设计中尤为重要，它提取了类库中的公共行为，将公共行为放在父类中，而通过其子类来实现不同的行为，它鼓励我们恰当使用继承来实现代码复用。
 * (3) 可实现一种反向控制结构，通过子类覆盖父类的钩子方法来决定某一特定步骤是否需要执行。
 * (4) 在模板方法模式中可以通过子类来覆盖父类的基本方法，不同的子类可以提供基本方法的不同实现，更换和增加新的子类很方便，符合单一职责原则和开闭原则。
 * 5.2 模式缺点
 * 需要为每一个基本方法的不同实现提供一个子类，如果父类中可变的基本方法太多，将会导致类的个数增加，系统更加庞大，设计也更加抽象，此时，可结合桥接模式来进行设计。
 * 5.3 模式适用场景
 * (1) 对一些复杂的算法进行分割，将其算法中固定不变的部分设计为模板方法和父类具体方法，而一些可以改变的细节由其子类来实现。即：一次性实现一个算法的不变部分，并将可变的行为留给子类来实现。
 * (2) 各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。
 * (3) 需要通过子类来决定父类算法中某个步骤是否执行，实现子类对父类的反向控制。
 *
 */
public class TemplateMethodPattern {
    public static void main(String[] args) {
        // 定义好子类，然后执行模板
        AbstractAccount account = new CurrentAccount();
        account.handle("张无忌", "123456");
    }

}
